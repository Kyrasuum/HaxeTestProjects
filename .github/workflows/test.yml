name: Run Tests

on:
  workflow_call:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build Projects"]
    branches: ["master", "main"]
    types:
      - completed

jobs:
  test-js:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        proj:
          - web-coconut

    steps:
      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        id: artifact
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yml
          workflow_conclusion: success
          # Optional, uploaded artifact name,
          # will download all artifacts if not specified
          # and extract them in respective subdirectories
          # https://github.com/actions/download-artifact#download-all-artifacts
          name: ${{ matrix.proj }}
          # Optional, directory where to extract artifact(s), defaults to current directory
          path: release
          # Optional, check the workflow run whether it has an artifact
          # then will get the last available artifact from previous workflow
          # default false, just try to download from the last one
          check_artifacts:  true
          # Optional, search for the last workflow run whose stored an artifact named as in `name` input
          # default false
          search_artifacts: true

  test-hl:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          - linux
          - windows
          - directx
          - js
          - swf
        proj:
          - async
          - heaps
          - heaps-cubefield
          - hl-tui
          - hxbit
          - hxwebsockets
          - mphx
          - udprotean

    steps:
      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        id: artifact
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yml
          workflow_conclusion: success
          # Optional, uploaded artifact name,
          # will download all artifacts if not specified
          # and extract them in respective subdirectories
          # https://github.com/actions/download-artifact#download-all-artifacts
          name: ${{ matrix.os }} ${{ matrix.proj }}
          # Optional, directory where to extract artifact(s), defaults to current directory
          path: release
          # Optional, check the workflow run whether it has an artifact
          # then will get the last available artifact from previous workflow
          # default false, just try to download from the last one
          check_artifacts:  true
          # Optional, search for the last workflow run whose stored an artifact named as in `name` input
          # default false
          search_artifacts: true

  test-cpp:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-latest
          - macos-latest
          - windows-latest
        proj:
          - hxraylib

    steps:
      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        id: artifact
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yml
          workflow_conclusion: success
          # Optional, uploaded artifact name,
          # will download all artifacts if not specified
          # and extract them in respective subdirectories
          # https://github.com/actions/download-artifact#download-all-artifacts
          name: ${{ matrix.os }} ${{ matrix.proj }}
          # Optional, directory where to extract artifact(s), defaults to current directory
          path: release
          # Optional, check the workflow run whether it has an artifact
          # then will get the last available artifact from previous workflow
          # default false, just try to download from the last one
          check_artifacts:  true
          # Optional, search for the last workflow run whose stored an artifact named as in `name` input
          # default false
          search_artifacts: true

  SAST:
    name: Scurity Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: run dependency check scan
        run: |
         docker run \
          --env SECURE_LOG_LEVEL=${SECURE_LOG_LEVEL} \
          -v "$PWD:/code" \
          -v /var/run/docker.sock:/var/run/docker.sock \
          registry.gitlab.com/gitlab-org/security-products/dependency-scanning:latest /code
          ls
          sudo apt-get install jq
          sudo pip install archerysec-cli
          DATE=`date +%Y-%m-%d`
          export PROJECT_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} --createproject \
         --project_name=devsecops --project_disc="devsecops project" --project_start=${DATE} \
         --project_end=${DATE} --project_owner=dev | tail -n1 | jq '.project_id' | sed -e 's/^"//' -e 's/"$//'`
          # Upload Scan report in archerysec
          export SCAN_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} \
          --upload --file_type=JSON --file=gl-dependency-scanning-report.json --TARGET=${GITHUB_SHA} \
          --scanner=gitlabsca --project_id=''$PROJECT_ID'' | tail -n1 | jq '.scan_id' | sed -e 's/^"//' -e 's/"$//'`
          echo "Scan Report Uploaded Successfully, Scan Id:" $SCAN_ID
        env:
          ARCHERYSEC_HOST: ${{ secrets.ARCHERYSEC_HOST }}
          ARCHERYSEC_USER: ${{ secrets.ARCHERYSEC_USER }}
          ARCHERYSEC_PASS: ${{ secrets.ARCHERYSEC_PASS }}
  
      - name: run source code review
        run: |
         docker run \
          --volume "$PWD:/code" \
          --volume /var/run/docker.sock:/var/run/docker.sock \
          registry.gitlab.com/gitlab-org/security-products/sast:latest /app/bin/run /code
          ls
              sudo apt-get install jq
              sudo pip install archerysec-cli
            DATE=`date +%Y-%m-%d`
             export PROJECT_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} --createproject \
             --project_name=devsecops --project_disc="devsecops project" --project_start=${DATE} \
             --project_end=${DATE} --project_owner=dev | tail -n1 | jq '.project_id' | sed -e 's/^"//' -e 's/"$//'`
            export SCAN_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} \
            --upload --file_type=JSON --file=gl-sast-report.json --TARGET=${GITHUB_SHA} \
            --scanner=gitlabsast --project_id=''$PROJECT_ID'' | tail -n1 | jq '.scan_id' | sed -e 's/^"//' -e 's/"$//'`
            echo "Scan Report Uploaded Successfully, Scan Id:" $SCAN_ID
        env:
          ARCHERYSEC_HOST: ${{ secrets.ARCHERYSEC_HOST }}
          ARCHERYSEC_USER: ${{ secrets.ARCHERYSEC_USER }}
          ARCHERYSEC_PASS: ${{ secrets.ARCHERYSEC_PASS }}
      - name: run DAST scan
        run: |
          # create wrk folder
          mkdir wrk
          chmod 777 wrk
          docker run \
           --volume $(pwd)/wrk:/output:rw \
           --volume $(pwd)/wrk:/zap/wrk:rw \
           registry.gitlab.com/gitlab-org/security-products/dast:latest /analyze -t ${ARCHERYSEC_HOST} \
          --auth-url ${ARCHERYSEC_AUTH_HOST} \
          --auth-username ${ARCHERYSEC_USER} \
          --auth-password ${ARCHERYSEC_PASS} \
          --auth-username-field 'username' \
          --auth-password-field 'password' \
          --auth-exclude-urls ${ARCHERYSEC_EXCLUDE_HOST} \
          --full-scan True \
           -x report.xml
          sudo apt-get install jq
          sudo pip install archerysec-cli
          DATE=`date +%Y-%m-%d`
          export PROJECT_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} --createproject \
          --project_name=devsecops --project_disc="devsecops project" --project_start=${DATE} \
          --project_end=${DATE} --project_owner=dev | tail -n1 | jq '.project_id' | sed -e 's/^"//' -e 's/"$//'`
          export SCAN_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} \
          --upload --file_type=XML --file=wrk/report.xml --TARGET=${GITHUB_SHA} \
          --scanner=zap_scan --project_id=''$PROJECT_ID'' | tail -n1 | jq '.scan_id' | sed -e 's/^"//' -e 's/"$//'`
          echo "Scan Report Uploaded Successfully, Scan Id:" $SCAN_ID
        env:
          ARCHERYSEC_HOST: ${{ secrets.ARCHERYSEC_HOST }}
          ARCHERYSEC_AUTH_HOST: ${{ secrets.ARCHERYSEC_AUTH_HOST }}
          ARCHERYSEC_EXCLUDE_HOST: ${{ secrets.ARCHERYSEC_EXCLUDE_HOST }}
          ARCHERYSEC_USER: ${{ secrets.ARCHERYSEC_USER }}
          ARCHERYSEC_PASS: ${{ secrets.ARCHERYSEC_PASS }}
  
      - name: run Infrastructure Scan
        run: |
          sudo apt-get install jq
          sudo pip install archerysec-cli
          DATE=`date +%Y-%m-%d`
          export PROJECT_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} --createproject \
          --project_name=devsecops --project_disc="devsecops project" --project_start=${DATE} \
          --project_end=${DATE} --project_owner=dev | tail -n1 | jq '.project_id' | sed -e 's/^"//' -e 's/"$//'`
          export SCAN_ID=`archerysec-cli -s ${ARCHERYSEC_HOST} -u ${ARCHERYSEC_USER} -p ${ARCHERYSEC_PASS} \
          --openvasscan --target_ip=${ARCHERYSEC_TARGET_HOST} --project_id=${PROJECT_ID}`
        env:
          ARCHERYSEC_HOST: ${{ secrets.ARCHERYSEC_HOST }}
          ARCHERYSEC_USER: ${{ secrets.ARCHERYSEC_USER }}
          ARCHERYSEC_PASS: ${{ secrets.ARCHERYSEC_PASS }}
          ARCHERYSEC_TARGET_HOST: ${{ secrets.ARCHERYSEC_TARGET_HOST }}
