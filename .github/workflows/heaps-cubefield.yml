# https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions
name: Build

on:
  push:
    paths-ignore:
    - '**/*.md'
  pull_request:
  workflow_dispatch:
    # https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-latest
          - macos-latest
          - windows-latest
        haxe: 
          - 4.2.3

    steps:
      - name: Show environment variables
        shell: bash
        run: env | sort

      - name: "Cache Haxelib Repository"
        uses: actions/cache@v2
        with:
          path: $RUNNER_TOOL_CACHE/haxe/${{ matrix.haxe }}/x64/lib
          key: ${{ runner.os }}-haxelib-${{ hashFiles('**/haxelib.json') }}
          restore-keys: |
            ${{ runner.os }}-haxelib-

      - name: Upgrade brew
        if: runner.os == 'macOS'
        env:
          # https://docs.brew.sh/Manpage#environment
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        run: |
          echo "::group::brew update" && brew update && echo "::endgroup::"
          echo "::group::brew bundle" && brew bundle && echo "::endgroup::"
          echo "::group::brew config" && brew config && echo "::endgroup::"
          echo "::group::brew install neko" && brew install neko && echo "::endgroup::"

          # workaround to prevent "/usr/local/... is not inside a keg" during "brew install mono"
          rm /usr/local/bin/2to3
          rm /usr/local/share/man/man1/*
          rm /usr/local/share/man/man5/*

      - name: Set up Python 3
        uses: actions/setup-python@v2 # https://github.com/actions/setup-python
        with:
          python-version: 3.8

      - name: Configure Python 3
        continue-on-error: true
        if: runner.os == 'Windows'
        shell: cmd
        # workaround for https://github.com/actions/setup-python/issues/123
        run: mklink "%pythonLocation%\python3.exe" "%pythonLocation%\python.exe"

      - name: Add msbuild to PATH
        if: startsWith(matrix.target, 'win')
        uses: microsoft/setup-msbuild@v1.0.3

      - name: "Install: Required Dev Packages (Linux)"
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -eux
          echo "MARCH=64" >> $GITHUB_ENV
          sudo apt-get update -y
          sudo apt-get install --no-install-recommends -y \
            libmbedtls-dev \
            libopenal-dev \
            libpng-dev \
            libsdl2-dev \
            libturbojpeg-dev \
            libjpeg-turbo8 \
            libjpeg-turbo8-dev \
            libuv1-dev \
            libvorbis-dev
          sudo apt-get install --no-install-recommends -y neko
          neko || true # print neko version

      - name: "Install: Required Dev Packages (MacOS)"
        if: runner.os == 'macOs'
        shell: bash
        run: |
          neko || true # print neko version
  
      - name: "Install: Required Dev Packages (Windows)"
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install --no-progress neko -y
          nekopath=$(find C:/ProgramData/chocolatey/lib/neko -name neko.dll -printf '%h\n')
          echo "NEKOPATH=$nekopath" >> $GITHUB_ENV
          neko || true # print neko version

      - name: Install Haxe ${{ matrix.haxe }}
        uses: krdlab/setup-haxe@v1 # https://github.com/krdlab/setup-haxe
        with:
          haxe-version: ${{ matrix.haxe }}
          
      - name: "Configure: Haxelib"
        shell: bash
        run: |
          set -eux
          haxelib setup ~/haxelib
          haxelib install hashlink
          haxelib list

      - name: Install Haxe libs
        shell: bash
        run: |
          haxelib install coconut.vdom
          haxelib install hashlink
          haxelib install hxcpp-debug-server
          haxelib install heaps
          haxelib install castle
          haxelib install hxbit
          haxelib install hscript
          haxelib install hxnodejs
          haxelib install format
          haxelib install domkit
          haxelib install hx3compat
          haxelib install hide
          haxelib install haxeui-core
          haxelib install haxeui-heaps
          haxelib install hlopenal
          haxelib install hlsdl
          haxelib install hldx
          haxelib install vshaxe
          haxelib install vscode
          haxelib install vscode-debugadapter
          haxelib install hscript
          haxelib install redistHelper

      - name: Git Checkout
        uses: actions/checkout@v2 #https://github.com/actions/checkout

      - name: Setup Hashlink
        shell: bash
        run: |
          sudo cp -f ./lib/*.so $(haxelib libpath redistHelper)/redistFiles/ || true
          sudo cp -f ./lib/*.dll $(haxelib libpath redistHelper)/redistFiles/ || true
          sudo cp -f ./lib/*.hdll $(haxelib libpath redistHelper)/redistFiles/ || true
          mkdir hashlink
          cd hashlink

      - name: Install Hashlink
        uses: pxshadow/setup-hashlink@v1.0.1

      - name: Configure Hashlink (Linux)
        shell: bash
        if: runner.os == 'Linux'
        run: |
          sudo cp -f ./*.hdll /usr/lib/ || true
          sudo cp -f ./*.so /lib64/ || true
          sudo cp -f ./*.so $(haxelib libpath redistHelper)/redistFiles/ || true
          sudo cp -f ./*.dll $(haxelib libpath redistHelper)/redistFiles/ || true
          sudo cp -f ./*.hdll $(haxelib libpath redistHelper)/redistFiles/ || true
          sudo cp -f ./hl $(haxelib libpath redistHelper)/redistFiles/ || true
          sudo cp -f ./hl $(haxelib libpath redistHelper)/redistFiles/hl.exe || true
          sudo cp -f ./*.so /usr/local/bin/ || true
          sudo cp -f ./*.so /lib64/ || true
          sudo cp -f ./*.so /lib/x86_64-linux-gnu/ || true
          sudo cp -f ./*.so /lib/ || true
          sudo cp -f ./*.so $(haxelib libpath redistHelper)/redistFiles/ || true
          ls
          cd ..

      - name: Configure Hashlink (macOs)
        shell: bash
        if: runner.os == 'macOs'
        run: |
          cd ..
  
      - name: Configure Hashlink (Windows)
        shell: bash
        if: runner.os == 'Windows'
        run: |
          cd ..

      - name: Build hl-dx
        shell: bash
        run: |
          haxe build/hl-dx.hxml

      - name: Build hl-sdl
        shell: bash
        run: |
          haxe build/hl-sdl.hxml

      - name: Build js
        shell: bash
        run: |
          haxe build/js.hxml

      - name: Build swf
        shell: bash
        run: |
          haxe build/swf.hxml

      - name: Package Release
        shell: bash
        if: runner.os == 'Linux'
        run: |
          haxelib run redistHelper -hl32 -zip -pak -o release/hl-dx -p hl-dx build/hl-dx.hxml
          haxelib run redistHelper -hl32 -zip -pak -o release/hl-sdl -p hl-sdl build/hl-sdl.hxml
          haxelib run redistHelper -hl32 -zip -pak -o release/js -p js build/js.hxml
          haxelib run redistHelper -hl32 -zip -pak -o release/swf -p swf build/swf.hxml
          mkdir release/hl-sdl/opengl_lin
          cp lib/hl release/hl-sdl/opengl_lin/
          cp bin/client-sdl.hl release/hl-sdl/opengl_lin/
          zip -r release/hl-sdl/opengl_lin.zip release/hl-sdl/opengl_lin/

      # Deploy github pages
      # - name: Deploy gh-pages
      #   uses: JamesIves/github-pages-deploy-action@4.1.4
      #   with:
      #     branch: pages
      #     folder: release
      #     target-folder: release
