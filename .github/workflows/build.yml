# https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions
name: Build Projects

on:
  workflow_dispatch:
  push:
    branches: ["master", "main"]
    paths-ignore:
    - '**/*.md'
  pull_request:

jobs:
  build-cpp:
    if: success()
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-latest
          - macos-latest
          - windows-latest
        proj:
          - hxraylib

    steps:
      - name: Setup
        uses: Kyrasuum/HaxeHLSetup@v1
        
      - name: Git Checkout
        uses: actions/checkout@v2 #https://github.com/actions/checkout

      - name: Build CPP Project (Linux)
        shell: bash
        if: runner.os == 'Linux'
        run: |
          cd ${{ matrix.proj }}
          haxelib install build/linux.hxml --always
          make linux
          cd ..
          
      - name: Build CPP Project (Mac)
        shell: bash
        if: runner.os == 'macOs'
        run: |
          cd ${{ matrix.proj }}
          haxelib install build/mac.hxml --always
          make mac
          cd ..

      - name: Build CPP Project (Windows)
        shell: bash
        if: runner.os == 'Windows'
        run: |
          cd ${{ matrix.proj }}
          haxelib install build/windows.hxml --always
          make windows
          cd ..

      - name: Archive cpp production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }} ${{ matrix.proj }}
          retention-days: 1
          path: |
            ./${{ matrix.proj }}/release/${{ runner.os }}

  build-js:
    if: success()
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        proj:
          - web-coconut

    steps:
      - name: Setup
        uses: Kyrasuum/HaxeHLSetup@v1

      - name: Git Checkout
        uses: actions/checkout@v2 #https://github.com/actions/checkout

      - name: Build JS Project
        shell: bash
        run: |
          cd ${{ matrix.proj }}
          haxelib install *.hxml --always
          make
          cd ..

      - name: Archive js production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.proj }}
          retention-days: 1
          path: |
            ./${{ matrix.proj }}/release/
    
  build-hl:
    if: success()
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        proj:
          - heaps-cubefield
          - heaps
          - hl-tui
          - hxbit
          - hxwebsockets
          - mphx
          - udprotean

    steps:
      - name: Setup
        uses: Kyrasuum/HaxeHLSetup@v1

      - name: Git Checkout
        uses: actions/checkout@v2 #https://github.com/actions/checkout

      - name: Print build libraries
        shell: bash
        run: |
          ls $(haxelib libpath redistHelper)/redistFiles/

      - name: Print redist loc
        shell: bash
        run: |
          echo $(haxelib libpath redistHelper)/redistFiles/

      - name: Build HL Project
        shell: bash
        run: |
          cd ${{ matrix.proj }}
          haxelib install *.hxml --always
          make
          cd ..

      - name: Archive linux hl production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux ${{ matrix.proj }}
          retention-days: 1
          path: |
            ./${{ matrix.proj }}/release/*_linux/hl

      - name: Archive windows hl production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows ${{ matrix.proj }}
          retention-days: 1
          path: |
            ./${{ matrix.proj }}/release/*_win/hl

  pages:
    if: success()
    needs: [build-js]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        proj:
          - web-coconut

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2 #https://github.com/actions/checkout
        
      - name: Download build artifacts
        uses: actions/download-artifact@v1
        with:
            name: ${{ matrix.proj }}
            path: release

      - name: Deploy gh-pages
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: pages
          folder: release
          target-folder: release/${{ matrix.proj }}

  release-cpp:
    if: success()
    needs: [build-cpp]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-latest
          - macos-latest
          - windows-latest
        proj:
          - hxraylib

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v1
        with:
            name: ${{ matrix.os }} ${{ matrix.proj }}
            
      - uses: edgarrc/action-7z@v1
        with:
          args: 7z a -t7z -mx=9 release.7z ./
    
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ matrix.proj }} Release-${{ matrix.os }} ${{ github.ref }}
          draft: true
          prerelease: true

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. 
        # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.7z
          asset_name: release.7z
          asset_content_type: application/x-7z-compressed

  release-hl:
    if: success()
    needs: [build-hl]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: 
          - linux
          - windows
        proj:
          - heaps-cubefield
          - heaps
          - hl-tui
          - hxbit
          - hxwebsockets
          - mphx
          - udprotean

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v1
        with:
            name: ${{ matrix.os }} ${{ matrix.proj }}
            
      - uses: edgarrc/action-7z@v1
        with:
          args: 7z a -t7z -mx=9 release.7z ./
    
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ matrix.proj }} Release-${{ matrix.os }} ${{ github.ref }}
          draft: true
          prerelease: true

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. 
        # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.7z
          asset_name: release.7z
          asset_content_type: application/x-7z-compressed

  release-js:
    if: success()
    needs: [build-js]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        proj:
          - web-coconut

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v1
        with:
            name: ${{ matrix.proj }}
            
      - uses: edgarrc/action-7z@v1
        with:
          args: 7z a -t7z -mx=9 release.7z ./
    
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ matrix.proj }} pages ${{ github.ref }}
          draft: true
          prerelease: true

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. 
        # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.7z
          asset_name: release.7z
          asset_content_type: application/x-7z-compressed
