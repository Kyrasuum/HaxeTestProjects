name: Publish Projects

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"
jobs:
  build:
    uses: ./.github/workflows/build.yml

  pages-js:
    if: success()
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        proj:
          - web-coconut

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2 #https://github.com/actions/checkout
        
      - name: Download build artifacts
        uses: actions/download-artifact@v1
        continue-on-error: true
        id: artifact
        with:
            name: ${{ matrix.proj }}
            path: release

      - name: Deploy gh-pages
        if: steps.artifact.conclusion == 'success'
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: pages
          folder: release
          target-folder: release/${{ matrix.proj }}

  pages-hl:
    if: success()
    needs: [build, pages-js]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        os:
          - js
          - swf
        proj:
          - async
          - heaps
          - heaps-cubefield
          - hl-tui
          - hxbit
          - hxwebsockets
          - mphx
          - udprotean

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2 #https://github.com/actions/checkout
        
      - name: Download build artifacts
        continue-on-error: true
        id: artifact
        uses: actions/download-artifact@v1
        with:
            name: ${{ matrix.os }} ${{ matrix.proj }}
            path: release
            
      - name: Deploy gh-pages
        if: steps.artifact.conclusion == 'success'
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: pages
          folder: release
          target-folder: release/${{ matrix.proj }}-${{ matrix.os }} 

  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      tag: ${{ steps.release.outputs.automatic_releases_tag }}

    steps:
      - uses: "marvinpinto/action-automatic-releases@latest"
        id: release
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false

  release-cpp:
    if: success()
    needs: [build, release]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-latest
          - macos-latest
          - windows-latest
        proj:
          - hxraylib

    steps:
      - name: Download build artifacts
        continue-on-error: true
        id: artifact
        uses: actions/download-artifact@v1
        with:
            name: ${{ matrix.os }} ${{ matrix.proj }}
            
      - uses: edgarrc/action-7z@v1
        if: steps.artifact.conclusion == 'success'
        with:
          args: 7z a -t7z -mx=9 release.7z ./

      - name: Check for haxelib
        if: steps.artifact.conclusion == 'success'
        run: echo '::set-output name=haxelib::'`(test -f haxelib.json && echo "true") || echo "false"`
        id: check

      - uses: EndBug/version-check@v1
        continue-on-error: true
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib
        id: version
        with:
          file-name: haxelib.json
          diff-search: true

      - name: Upload Release Asset
        if: steps.artifact.conclusion == 'success' && (steps.check.outputs.haxelib != 'true' || steps.version.conclusion == 'failure')
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. 
        # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{needs.release.outputs.upload_url}}
          asset_path: ./release.7z
          asset_name: ${{ matrix.proj }} Release-${{ matrix.os }}
          asset_content_type: application/x-7z-compressed

      - name: Upload Haxelib Release Asset
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib == 'true' && steps.version.conclusion == 'success' && steps.version.outputs.changed
        id: upload-hl-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
        # This pulls from the CREATE HL RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. 
        # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{needs.release.outputs.upload_url}}
          asset_path: ./release.7z
          asset_name: ${{ matrix.proj }} Release-${{ matrix.os }} ${{ steps.version.outputs.version }}
          asset_content_type: application/x-7z-compressed

      - name: Clone repo for publishing
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib == 'true' && steps.version.conclusion == 'success' && steps.version.outputs.changed
        uses: actions/checkout@v2

      - name: Setup publishing haxelib
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib == 'true' && steps.version.conclusion == 'success' && steps.version.outputs.changed
        uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Publish to haxelib
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib == 'true' && steps.version.conclusion == 'success' && steps.version.outputs.changed
        shell: bash
        run: |
          cd ${{ matrix.proj }}
          haxe -version
          haxelib submit . ${{ secrets.HAXELIB_PASSWORD }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-hl:
    if: success()
    needs: [build, release]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: 
          - linux
          - windows
          - directx
          - js
          - swf
        proj:
          - async
          - heaps
          - heaps-cubefield
          - hl-tui
          - hxbit
          - hxwebsockets
          - mphx
          - udprotean

    steps:
      - name: Download build artifacts
        continue-on-error: true
        id: artifact
        uses: actions/download-artifact@v1
        with:
            name: ${{ matrix.os }} ${{ matrix.proj }}
            
      - uses: edgarrc/action-7z@v1
        if: steps.artifact.conclusion == 'success'
        with:
          args: 7z a -t7z -mx=9 release.7z ./

      - name: Check for haxelib
        if: steps.artifact.conclusion == 'success'
        run: echo '::set-output name=haxelib::'`(test -f haxelib.json && echo "true") || echo "false"`
        id: check

      - uses: EndBug/version-check@v1
        continue-on-error: true
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib == 'true'
        id: version
        with:
          file-name: haxelib.json
          diff-search: true

      - name: Upload Release Asset
        if: steps.artifact.conclusion == 'success' && (steps.check.outputs.haxelib != 'true' || steps.version.conclusion == 'failure')
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. 
        # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{needs.release.outputs.upload_url}}
          asset_path: ./release.7z
          asset_name: ${{ matrix.proj }} Release-${{ matrix.os }}
          asset_content_type: application/x-7z-compressed

      - name: Upload Haxelib Release Asset
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib == 'true' && steps.version.conclusion == 'success' && steps.version.outputs.changed
        id: upload-hl-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
        # This pulls from the CREATE HL RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. 
        # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{needs.release.outputs.upload_url}}
          asset_path: ./release.7z
          asset_name: ${{ matrix.proj }} Release-${{ matrix.os }} ${{ steps.version.outputs.version }}
          asset_content_type: application/x-7z-compressed

      - name: Clone repo for publishing
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib == 'true' && steps.version.conclusion == 'success' && steps.version.outputs.changed
        uses: actions/checkout@v2

      - name: Setup publishing haxelib
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib == 'true' && steps.version.conclusion == 'success' && steps.version.outputs.changed
        uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Publish to haxelib
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib == 'true' && steps.version.conclusion == 'success' && steps.version.outputs.changed
        shell: bash
        run: |
          cd ${{ matrix.proj }}
          haxe -version
          haxelib submit . ${{ secrets.HAXELIB_PASSWORD }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-js:
    if: success()
    needs: [build, release]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        proj:
          - web-coconut

    steps:
      - name: Download build artifacts
        continue-on-error: true
        id: artifact
        uses: actions/download-artifact@v1
        with:
            name: ${{ matrix.proj }}
            
      - uses: edgarrc/action-7z@v1
        if: steps.artifact.conclusion == 'success'
        with:
          args: 7z a -t7z -mx=9 release.7z ./

      - name: Check for haxelib
        if: steps.artifact.conclusion == 'success'
        run: echo '::set-output name=haxelib::'`(test -f haxelib.json && echo "true") || echo "false"`
        id: check

      - uses: EndBug/version-check@v1
        continue-on-error: true
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib
        id: version
        with:
          file-name: haxelib.json
          diff-search: true

      - name: Upload Release Asset
        if: steps.artifact.conclusion == 'success' && (steps.check.outputs.haxelib != 'true' || steps.version.conclusion == 'failure')
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. 
        # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{needs.release.outputs.upload_url}}
          asset_path: ./release.7z
          asset_name: ${{ matrix.proj }} Release-Pages
          asset_content_type: application/x-7z-compressed

      - name: Upload Haxelib Release Asset
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib == 'true' && steps.version.conclusion == 'success' && steps.version.outputs.changed
        id: upload-hl-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
        # This pulls from the CREATE HL RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. 
        # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{needs.release.outputs.upload_url}}
          asset_path: ./release.7z
          asset_name: ${{ matrix.proj }} Release-Pages ${{ steps.version.outputs.version }}
          asset_content_type: application/x-7z-compressed

      - name: Clone repo for publishing
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib == 'true' && steps.version.conclusion == 'success' && steps.version.outputs.changed
        uses: actions/checkout@v2

      - name: Setup publishing haxelib
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib == 'true' && steps.version.conclusion == 'success' && steps.version.outputs.changed
        uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Publish to haxelib
        if: steps.artifact.conclusion == 'success' && steps.check.outputs.haxelib == 'true' && steps.version.conclusion == 'success' && steps.version.outputs.changed
        shell: bash
        run: |
          cd ${{ matrix.proj }}
          haxe -version
          haxelib submit . ${{ secrets.HAXELIB_PASSWORD }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
